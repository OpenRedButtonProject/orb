diff --git a/cc/layers/solid_color_layer_impl.cc b/cc/layers/solid_color_layer_impl.cc
index 9153f6fde6cd..7e883fb467b2 100644
--- a/cc/layers/solid_color_layer_impl.cc
+++ b/cc/layers/solid_color_layer_impl.cc
@@ -70,6 +70,16 @@ void SolidColorLayerImpl::AppendQuads(viz::CompositorRenderPass* render_pass,
   AppendDebugBorderQuad(render_pass, gfx::Rect(bounds()), shared_quad_state,
                         append_quads_data);
 
+  // For solid color layers we use may_contain_video() as an alias to cut a hole
+  if (may_contain_video()) {
+    shared_quad_state->are_contents_opaque = false;
+    shared_quad_state->blend_mode = SkBlendMode::kSrcOver;
+    auto* quad = render_pass->CreateAndAppendDrawQuad<viz::SolidColorDrawQuad>();
+    quad->SetAll(shared_quad_state, gfx::Rect(bounds()), gfx::Rect(bounds()),
+        /*needs_blending=*/false, SK_ColorTRANSPARENT,
+        /*force_anti_aliasing_off=*/true);
+    return;
+  }
   // TODO(hendrikw): We need to pass the visible content rect rather than
   // |bounds()| here.
   EffectNode* effect_node = GetEffectTree().Node(effect_tree_index());
diff --git a/third_party/blink/renderer/core/html/html_object_element.cc b/third_party/blink/renderer/core/html/html_object_element.cc
index 543a947e5153..5fbae2759eac 100644
--- a/third_party/blink/renderer/core/html/html_object_element.cc
+++ b/third_party/blink/renderer/core/html/html_object_element.cc
@@ -91,7 +91,10 @@ void HTMLObjectElement::CollectStyleForPresentationAttribute(
 void HTMLObjectElement::ParseAttribute(
     const AttributeModificationParams& params) {
   const QualifiedName& name = params.name;
-  if (name == html_names::kFormAttr) {
+  if (name == html_names::kNoshadeAttr) {
+    SetNeedsPluginUpdate(true);
+    ReattachOnPluginChangeIfNeeded();
+  } else if (name == html_names::kFormAttr) {
     FormAttributeChanged();
   } else if (name == html_names::kTypeAttr) {
     SetServiceType(params.new_value.LowerASCII());
diff --git a/third_party/blink/renderer/core/html/html_plugin_element.cc b/third_party/blink/renderer/core/html/html_plugin_element.cc
index 604c09930aed..92682d00e9e3 100644
--- a/third_party/blink/renderer/core/html/html_plugin_element.cc
+++ b/third_party/blink/renderer/core/html/html_plugin_element.cc
@@ -341,6 +341,13 @@ LayoutObject* HTMLPlugInElement::CreateLayoutObject(const ComputedStyle& style,
   // Fallback content breaks the DOM->layoutObject class relationship of this
   // class and all superclasses because createObject won't necessarily return
   // a LayoutEmbeddedObject or LayoutEmbeddedContent.
+  if (EqualIgnoringASCIICase(service_type_, "video/broadcast") &&
+      FastHasAttribute(html_names::kNoshadeAttr)) {
+    auto* embedded_object = new LayoutEmbeddedObject(this);
+    embedded_object->shows_broadcast_hole_ = true;
+    return embedded_object;
+  }
+
   if (UseFallbackContent())
     return LayoutObject::CreateObject(this, style, legacy);
 
diff --git a/third_party/blink/renderer/core/layout/layout_embedded_content.cc b/third_party/blink/renderer/core/layout/layout_embedded_content.cc
index cb2f706966c8..d7d6288e099e 100644
--- a/third_party/blink/renderer/core/layout/layout_embedded_content.cc
+++ b/third_party/blink/renderer/core/layout/layout_embedded_content.cc
@@ -267,6 +267,8 @@ CompositingReasons LayoutEmbeddedContent::AdditionalCompositingReasons() const {
         return CompositingReason::kIFrame;
     }
   }
+  if (shows_broadcast_hole_)
+    return CompositingReason::kPlugin;
   return CompositingReason::kNone;
 }
 
diff --git a/third_party/blink/renderer/core/layout/layout_embedded_content.h b/third_party/blink/renderer/core/layout/layout_embedded_content.h
index fc5b7c8dc5d2..52766b89a8ff 100644
--- a/third_party/blink/renderer/core/layout/layout_embedded_content.h
+++ b/third_party/blink/renderer/core/layout/layout_embedded_content.h
@@ -77,7 +77,7 @@ class CORE_EXPORT LayoutEmbeddedContent : public LayoutReplaced {
   }
 
   bool IsThrottledFrameView() const;
-
+  bool shows_broadcast_hole_ = false;
  protected:
   PaintLayerType LayerTypeRequired() const override;
 
diff --git a/third_party/blink/renderer/core/paint/compositing/composited_layer_mapping.cc b/third_party/blink/renderer/core/paint/compositing/composited_layer_mapping.cc
index 68204175c259..5621ae242d1c 100644
--- a/third_party/blink/renderer/core/paint/compositing/composited_layer_mapping.cc
+++ b/third_party/blink/renderer/core/paint/compositing/composited_layer_mapping.cc
@@ -28,6 +28,7 @@
 #include <memory>
 
 #include "cc/layers/picture_layer.h"
+#include "cc/layers/solid_color_layer.h"
 #include "third_party/blink/renderer/core/animation/element_animations.h"
 #include "third_party/blink/renderer/core/display_lock/display_lock_utilities.h"
 #include "third_party/blink/renderer/core/dom/dom_node_ids.h"
@@ -336,7 +337,14 @@ bool CompositedLayerMapping::UpdateGraphicsLayerConfiguration(
     UpdateInternalHierarchy();
 
   if (layout_object.IsLayoutEmbeddedContent()) {
-    if (WebPluginContainerImpl* plugin = GetPluginContainer(layout_object)) {
+    bool shows_broadcast_hole = false;
+    if (auto* embedded_object = DynamicTo<LayoutEmbeddedObject>(layout_object))
+      shows_broadcast_hole = embedded_object->shows_broadcast_hole_;
+    if (shows_broadcast_hole) {
+      scoped_refptr<cc::SolidColorLayer> solid_color_layer = cc::SolidColorLayer::Create();
+      solid_color_layer->SetMayContainVideo(true);
+      graphics_layer_->SetContentsToCcLayer(solid_color_layer);
+    } else if (WebPluginContainerImpl* plugin = GetPluginContainer(layout_object)) {
       graphics_layer_->SetContentsToCcLayer(plugin->CcLayer());
     } else if (auto* frame_owner =
                    DynamicTo<HTMLFrameOwnerElement>(layout_object.GetNode())) {
